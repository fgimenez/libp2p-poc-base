diff --git a/libp2p/core/Cargo.toml b/libp2p/core/Cargo.toml
index 0970b3e..40c04fa 100644
--- a/libp2p/core/Cargo.toml
+++ b/libp2p/core/Cargo.toml
@@ -38,6 +38,7 @@ unsigned-varint = "0.7"
 void = "1"
 zeroize = "1"
 serde = { version = "1", optional = true, features = ["derive"] }
+wasm-timer = "0.2.5"

 [target.'cfg(not(target_arch = "wasm32"))'.dependencies]
 ring = { version = "0.16.9", features = ["alloc", "std"], default-features = false, optional = true}
diff --git a/libp2p/core/src/transport/timeout.rs b/libp2p/core/src/transport/timeout.rs
index 5c3867b..d20d860 100644
--- a/libp2p/core/src/transport/timeout.rs
+++ b/libp2p/core/src/transport/timeout.rs
@@ -29,8 +29,8 @@ use crate::{
     Multiaddr, Transport,
 };
 use futures::prelude::*;
-use futures_timer::Delay;
 use std::{error, fmt, io, pin::Pin, task::Context, task::Poll, time::Duration};
+use wasm_timer::Delay;

 /// A `TransportTimeout` is a `Transport` that wraps another `Transport` and adds
 /// timeouts to all inbound and outbound connection attempts.
@@ -175,7 +175,8 @@ where

         match Pin::new(&mut this.timer).poll(cx) {
             Poll::Pending => Poll::Pending,
-            Poll::Ready(()) => Poll::Ready(Err(TransportTimeoutError::Timeout)),
+            Poll::Ready(Ok(_)) => Poll::Ready(Err(TransportTimeoutError::Timeout)),
+            Poll::Ready(Err(..)) => Poll::Ready(Err(TransportTimeoutError::Timeout)),
         }
     }
 }
diff --git a/libp2p/protocols/ping/Cargo.toml b/libp2p/protocols/ping/Cargo.toml
index aa2b596..3e5da4f 100644
--- a/libp2p/protocols/ping/Cargo.toml
+++ b/libp2p/protocols/ping/Cargo.toml
@@ -19,6 +19,7 @@ libp2p-swarm = { version = "0.39.0", path = "../../swarm" }
 log = "0.4.1"
 rand = "0.7.2"
 void = "1.0"
+wasm-timer = "0.2.5"

 [dev-dependencies]
 async-std = "1.6.2"
diff --git a/libp2p/protocols/ping/src/handler.rs b/libp2p/protocols/ping/src/handler.rs
index f0e71fb..73e12ac 100644
--- a/libp2p/protocols/ping/src/handler.rs
+++ b/libp2p/protocols/ping/src/handler.rs
@@ -21,7 +21,6 @@
 use crate::{protocol, PROTOCOL_NAME};
 use futures::future::BoxFuture;
 use futures::prelude::*;
-use futures_timer::Delay;
 use libp2p_core::upgrade::ReadyUpgrade;
 use libp2p_core::{upgrade::NegotiationError, UpgradeError};
 use libp2p_swarm::{
@@ -37,6 +36,7 @@ use std::{
     time::Duration,
 };
 use void::Void;
+use wasm_timer::Delay;

 /// The configuration for outbound pings.
 #[derive(Debug, Clone)]
@@ -357,7 +357,7 @@ impl ConnectionHandler for Handler {
                         self.outbound = Some(PingState::Idle(stream));
                         break;
                     }
-                    Poll::Ready(()) => {
+                    Poll::Ready(..) => {
                         self.timer.reset(self.config.timeout);
                         self.outbound = Some(PingState::Ping(protocol::send_ping(stream).boxed()));
                     }
diff --git a/libp2p/protocols/ping/src/protocol.rs b/libp2p/protocols/ping/src/protocol.rs
index 3c44adc..63d8a18 100644
--- a/libp2p/protocols/ping/src/protocol.rs
+++ b/libp2p/protocols/ping/src/protocol.rs
@@ -19,9 +19,9 @@
 // DEALINGS IN THE SOFTWARE.

 use futures::prelude::*;
-use instant::Instant;
 use rand::{distributions, prelude::*};
 use std::{io, time::Duration};
+use wasm_timer::Instant;

 pub const PROTOCOL_NAME: &[u8] = b"/ipfs/ping/1.0.0";

diff --git a/libp2p/swarm/Cargo.toml b/libp2p/swarm/Cargo.toml
index a22b114..a7abf6f 100644
--- a/libp2p/swarm/Cargo.toml
+++ b/libp2p/swarm/Cargo.toml
@@ -23,6 +23,7 @@ rand = "0.7"
 smallvec = "1.6.1"
 thiserror = "1.0"
 void = "1"
+wasm-timer = "0.2.5"

 [dev-dependencies]
 async-std = { version = "1.6.2", features = ["attributes"] }
diff --git a/libp2p/swarm/src/connection/handler_wrapper.rs b/libp2p/swarm/src/connection/handler_wrapper.rs
index 03d09b3..9841276 100644
--- a/libp2p/swarm/src/connection/handler_wrapper.rs
+++ b/libp2p/swarm/src/connection/handler_wrapper.rs
@@ -27,8 +27,6 @@ use crate::IntoConnectionHandler;

 use futures::prelude::*;
 use futures::stream::FuturesUnordered;
-use futures_timer::Delay;
-use instant::Instant;
 use libp2p_core::{
     muxing::SubstreamBox,
     upgrade::{self, InboundUpgradeApply, OutboundUpgradeApply, UpgradeError},
@@ -36,6 +34,7 @@ use libp2p_core::{
 };
 use libp2p_core::{ConnectedPoint, PeerId};
 use std::{error, fmt, pin::Pin, task::Context, task::Poll, time::Duration};
+use wasm_timer::{Delay, Instant};

 /// A wrapper for an underlying [`ConnectionHandler`].
 ///
@@ -146,7 +145,8 @@ where

     fn poll(mut self: Pin<&mut Self>, cx: &mut Context) -> Poll<Self::Output> {
         match self.timeout.poll_unpin(cx) {
-            Poll::Ready(()) => {
+            // TODO: check for error
+            Poll::Ready(..) => {
                 return Poll::Ready((
                     self.user_data
                         .take()
@@ -154,7 +154,6 @@ where
                     Err(ConnectionHandlerUpgrErr::Timeout),
                 ))
             }
-
             Poll::Pending => {}
         }

@@ -400,15 +399,13 @@ where
             (Shutdown::Later(timer, deadline), KeepAlive::Until(t)) => {
                 if *deadline != t {
                     *deadline = t;
-                    if let Some(dur) = deadline.checked_duration_since(Instant::now()) {
-                        timer.reset(dur)
-                    }
+                    let dur = deadline.duration_since(Instant::now());
+                    timer.reset(dur)
                 }
             }
             (_, KeepAlive::Until(t)) => {
-                if let Some(dur) = t.checked_duration_since(Instant::now()) {
-                    self.shutdown = Shutdown::Later(Delay::new(dur), t)
-                }
+                let dur = t.duration_since(Instant::now());
+                self.shutdown = Shutdown::Later(Delay::new(dur), t)
             }
             (_, KeepAlive::No) => self.shutdown = Shutdown::Asap,
             (_, KeepAlive::Yes) => self.shutdown = Shutdown::None,
diff --git a/libp2p/swarm/src/handler.rs b/libp2p/swarm/src/handler.rs
index c6125f2..b01e5d2 100644
--- a/libp2p/swarm/src/handler.rs
+++ b/libp2p/swarm/src/handler.rs
@@ -49,9 +49,9 @@ mod select;

 pub use crate::upgrade::{InboundUpgradeSend, OutboundUpgradeSend, SendWrapper, UpgradeInfoSend};

-use instant::Instant;
 use libp2p_core::{upgrade::UpgradeError, ConnectedPoint, Multiaddr, PeerId};
 use std::{cmp::Ordering, error, fmt, task::Context, task::Poll, time::Duration};
+use wasm_timer::Instant;

 pub use dummy::DummyConnectionHandler;
 pub use map_in::MapInEvent;
diff --git a/libp2p/swarm/src/handler/one_shot.rs b/libp2p/swarm/src/handler/one_shot.rs
index 5db6b4d..ce0c0ea 100644
--- a/libp2p/swarm/src/handler/one_shot.rs
+++ b/libp2p/swarm/src/handler/one_shot.rs
@@ -23,9 +23,9 @@ use crate::handler::{
     SubstreamProtocol,
 };
 use crate::upgrade::{InboundUpgradeSend, OutboundUpgradeSend};
-use instant::Instant;
 use smallvec::SmallVec;
 use std::{error, fmt::Debug, task::Context, task::Poll, time::Duration};
+use wasm_timer::Instant;

 /// A [`ConnectionHandler`] that opens a new substream for each request.
 // TODO: Debug
